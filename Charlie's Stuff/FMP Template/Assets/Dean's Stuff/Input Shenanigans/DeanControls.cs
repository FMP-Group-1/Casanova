//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Dean's Assets/Input Shenanigans/DeanControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DeanControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DeanControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DeanControls"",
    ""maps"": [
        {
            ""name"": ""Debug"",
            ""id"": ""50ceb4ff-8654-472f-96af-442e8fc295e7"",
            ""actions"": [
                {
                    ""name"": ""AI_Move"",
                    ""type"": ""Button"",
                    ""id"": ""ff33d816-42c4-448e-a0bb-6a8c53e6b669"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AI_Combat"",
                    ""type"": ""Button"",
                    ""id"": ""b9a11369-c3d4-4667-9057-926c3f104439"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""e5931e43-2df2-4119-9943-569001121430"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""type"": ""PassThrough"",
                    ""id"": ""11a98b12-581f-4b9f-ae37-f4f38bbb707c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2a45a5b2-cafe-4ad2-a60e-92ff9cc49318"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AI_Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f57a6872-13a9-4142-870b-ceb051ff27ed"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AI_Combat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3af5534d-27e0-425f-bfe1-01544207d507"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ed507c93-a708-4378-ac33-76c09083b22a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3724e5dd-d2f6-4525-aef7-d72e4a960a06"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""603e69eb-7d60-4337-b7ad-527e002a146a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""354d66ad-46e6-406d-b324-0213600d4924"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2fdb3061-d9a4-4d68-a85d-7e4ef6adef86"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Arrows"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""PlayerControls"",
            ""id"": ""97d4972b-d29d-4e7e-9864-4a9e69cb1b88"",
            ""actions"": [
                {
                    ""name"": ""MovePlayer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e3ab5a2f-843a-48cc-a588-f410ffd572d5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""fa858b31-7b16-4767-9738-90e72728ec79"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8ebc6ec5-615d-4982-be9d-963d13cf12b2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ad6078db-0a3e-4d09-b763-d078d29c79c6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3a51d953-abea-457c-a4de-65b4271ba6b1"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ee6bdb36-7d35-491e-a992-e3b0f46182b6"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0f9b3c17-92c5-4118-a2c5-44d114018f2c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MovePlayer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6b88a829-1b1b-41a9-97d1-5b56ba8eccc6"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Debug
        m_Debug = asset.FindActionMap("Debug", throwIfNotFound: true);
        m_Debug_AI_Move = m_Debug.FindAction("AI_Move", throwIfNotFound: true);
        m_Debug_AI_Combat = m_Debug.FindAction("AI_Combat", throwIfNotFound: true);
        m_Debug_Menu = m_Debug.FindAction("Menu", throwIfNotFound: true);
        m_Debug_Arrows = m_Debug.FindAction("Arrows", throwIfNotFound: true);
        // PlayerControls
        m_PlayerControls = asset.FindActionMap("PlayerControls", throwIfNotFound: true);
        m_PlayerControls_MovePlayer = m_PlayerControls.FindAction("MovePlayer", throwIfNotFound: true);
        m_PlayerControls_LeftClick = m_PlayerControls.FindAction("LeftClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Debug
    private readonly InputActionMap m_Debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_Debug_AI_Move;
    private readonly InputAction m_Debug_AI_Combat;
    private readonly InputAction m_Debug_Menu;
    private readonly InputAction m_Debug_Arrows;
    public struct DebugActions
    {
        private @DeanControls m_Wrapper;
        public DebugActions(@DeanControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @AI_Move => m_Wrapper.m_Debug_AI_Move;
        public InputAction @AI_Combat => m_Wrapper.m_Debug_AI_Combat;
        public InputAction @Menu => m_Wrapper.m_Debug_Menu;
        public InputAction @Arrows => m_Wrapper.m_Debug_Arrows;
        public InputActionMap Get() { return m_Wrapper.m_Debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @AI_Move.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnAI_Move;
                @AI_Move.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnAI_Move;
                @AI_Move.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnAI_Move;
                @AI_Combat.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnAI_Combat;
                @AI_Combat.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnAI_Combat;
                @AI_Combat.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnAI_Combat;
                @Menu.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnMenu;
                @Menu.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnMenu;
                @Menu.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnMenu;
                @Arrows.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnArrows;
                @Arrows.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnArrows;
                @Arrows.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnArrows;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AI_Move.started += instance.OnAI_Move;
                @AI_Move.performed += instance.OnAI_Move;
                @AI_Move.canceled += instance.OnAI_Move;
                @AI_Combat.started += instance.OnAI_Combat;
                @AI_Combat.performed += instance.OnAI_Combat;
                @AI_Combat.canceled += instance.OnAI_Combat;
                @Menu.started += instance.OnMenu;
                @Menu.performed += instance.OnMenu;
                @Menu.canceled += instance.OnMenu;
                @Arrows.started += instance.OnArrows;
                @Arrows.performed += instance.OnArrows;
                @Arrows.canceled += instance.OnArrows;
            }
        }
    }
    public DebugActions @Debug => new DebugActions(this);

    // PlayerControls
    private readonly InputActionMap m_PlayerControls;
    private IPlayerControlsActions m_PlayerControlsActionsCallbackInterface;
    private readonly InputAction m_PlayerControls_MovePlayer;
    private readonly InputAction m_PlayerControls_LeftClick;
    public struct PlayerControlsActions
    {
        private @DeanControls m_Wrapper;
        public PlayerControlsActions(@DeanControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MovePlayer => m_Wrapper.m_PlayerControls_MovePlayer;
        public InputAction @LeftClick => m_Wrapper.m_PlayerControls_LeftClick;
        public InputActionMap Get() { return m_Wrapper.m_PlayerControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerControlsActions instance)
        {
            if (m_Wrapper.m_PlayerControlsActionsCallbackInterface != null)
            {
                @MovePlayer.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovePlayer;
                @MovePlayer.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovePlayer;
                @MovePlayer.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnMovePlayer;
                @LeftClick.started -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLeftClick;
                @LeftClick.performed -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLeftClick;
                @LeftClick.canceled -= m_Wrapper.m_PlayerControlsActionsCallbackInterface.OnLeftClick;
            }
            m_Wrapper.m_PlayerControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MovePlayer.started += instance.OnMovePlayer;
                @MovePlayer.performed += instance.OnMovePlayer;
                @MovePlayer.canceled += instance.OnMovePlayer;
                @LeftClick.started += instance.OnLeftClick;
                @LeftClick.performed += instance.OnLeftClick;
                @LeftClick.canceled += instance.OnLeftClick;
            }
        }
    }
    public PlayerControlsActions @PlayerControls => new PlayerControlsActions(this);
    public interface IDebugActions
    {
        void OnAI_Move(InputAction.CallbackContext context);
        void OnAI_Combat(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnArrows(InputAction.CallbackContext context);
    }
    public interface IPlayerControlsActions
    {
        void OnMovePlayer(InputAction.CallbackContext context);
        void OnLeftClick(InputAction.CallbackContext context);
    }
}
